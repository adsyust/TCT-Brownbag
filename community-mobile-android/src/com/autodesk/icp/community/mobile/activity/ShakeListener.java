package com.autodesk.icp.community.mobile.activity;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.util.Log;

/**
 * ä¸€ä¸ªæ£€æµ‹æ‰‹æœºæ‘‡æ™ƒçš„ç›‘å?¬å™¨
 */
public class ShakeListener implements SensorEventListener {
	// é€Ÿåº¦é˜ˆå€¼ï¼Œå½“æ‘‡æ™ƒé€Ÿåº¦è¾¾åˆ°è¿™å€¼å?Žäº§ç”Ÿä½œç”¨
	private static final int SPEED_SHRESHOLD = 3000;
	// ä¸¤æ¬¡æ£€æµ‹çš„æ—¶é—´é—´éš”
	private static final int UPTATE_INTERVAL_TIME = 70;
	// ä¼ æ„Ÿå™¨ç®¡ç?†å™¨
	private SensorManager sensorManager;
	// ä¼ æ„Ÿå™¨
	private Sensor sensor;
	// é‡?åŠ›æ„Ÿåº”ç›‘å?¬å™¨
	private OnShakeListener onShakeListener;
	// ä¸Šä¸‹æ–‡
	private Context mContext;
	// æ‰‹æœºä¸Šä¸€ä¸ªä½?ç½®æ—¶é‡?åŠ›æ„Ÿåº”å??æ ‡
	private float lastX;
	private float lastY;
	private float lastZ;
	// ä¸Šæ¬¡æ£€æµ‹æ—¶é—´
	private long lastUpdateTime;

	// æž„é€ å™¨
	public ShakeListener(Context c) {
		// èŽ·å¾—ç›‘å?¬å¯¹è±¡
		mContext = c;
		start();
	}

	// å¼€å§‹
	public void start() {
		// èŽ·å¾—ä¼ æ„Ÿå™¨ç®¡ç?†å™¨
		sensorManager = (SensorManager) mContext
				.getSystemService(Context.SENSOR_SERVICE);
		if (sensorManager != null) {
			// èŽ·å¾—é‡?åŠ›ä¼ æ„Ÿå™¨
			sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
		}
		// æ³¨å†Œ
		if (sensor != null) {
			sensorManager.registerListener(this, sensor,
					SensorManager.SENSOR_DELAY_GAME);
		}

	}

	// å?œæ­¢æ£€æµ‹
	public void stop() {
		sensorManager.unregisterListener(this);
	}

	// è®¾ç½®é‡?åŠ›æ„Ÿåº”ç›‘å?¬å™¨
	public void setOnShakeListener(OnShakeListener listener) {
		onShakeListener = listener;
	}

	// é‡?åŠ›æ„Ÿåº”å™¨æ„Ÿåº”èŽ·å¾—å?˜åŒ–æ•°æ?®
	public void onSensorChanged(SensorEvent event) {
		// çŽ°åœ¨æ£€æµ‹æ—¶é—´
		long currentUpdateTime = System.currentTimeMillis();
		// ä¸¤æ¬¡æ£€æµ‹çš„æ—¶é—´é—´éš”
		long timeInterval = currentUpdateTime - lastUpdateTime;
		// åˆ¤æ–­æ˜¯å?¦è¾¾åˆ°äº†æ£€æµ‹æ—¶é—´é—´éš”
		if (timeInterval < UPTATE_INTERVAL_TIME)
			return;
		// çŽ°åœ¨çš„æ—¶é—´å?˜æˆ?lastæ—¶é—´
		lastUpdateTime = currentUpdateTime;

		// èŽ·å¾—x,y,zå??æ ‡
		float x = event.values[0];
		float y = event.values[1];
		float z = event.values[2];

		// èŽ·å¾—x,y,zçš„å?˜åŒ–å€¼
		float deltaX = x - lastX;
		float deltaY = y - lastY;
		float deltaZ = z - lastZ;

		// å°†çŽ°åœ¨çš„å??æ ‡å?˜æˆ?lastå??æ ‡
		lastX = x;
		lastY = y;
		lastZ = z;

		double speed = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ
				* deltaZ)
				/ timeInterval * 10000;
		Log.v("thelog", "===========log===================");
		// è¾¾åˆ°é€Ÿåº¦é˜€å€¼ï¼Œå?‘å‡ºæ??ç¤º
		if (speed >= SPEED_SHRESHOLD) {
			onShakeListener.onShake();
		}
	}

	public void onAccuracyChanged(Sensor sensor, int accuracy) {

	}

	// æ‘‡æ™ƒç›‘å?¬æŽ¥å?£
	public interface OnShakeListener {
		public void onShake();
	}

}